{
  "name": "grunt-spritesmith",
  "version": "1.7.0",
  "description": "Grunt library for using spritesmith",
  "main": "tasks/grunt-spritesmith.js",
  "scripts": {
    "test": "cd src-test && grunt"
  },
  "keywords": [
    "grunt",
    "gruntplugin",
    "sprite",
    "spritesheet",
    "css",
    "spritesmith",
    "cross-platform"
  ],
  "author": {
    "name": "Todd Wolfson",
    "email": "todd@twolfson.com"
  },
  "license": "MIT",
  "dependencies": {
    "spritesmith": "~0.11.0",
    "json2css": "~3.2.0",
    "underscore": "~1.4.2",
    "url2": "*"
  },
  "_devDependencies": {
    "grunt": "~0.3.12",
    "grunt-contrib-clean": "~0.3.2"
  },
  "devDependencies": {
    "grunt": "~0.4.0",
    "grunt-contrib-nodeunit": "~0.1.2",
    "grunt-contrib-clean": "~0.4.0"
  },
  "repository": [
    {
      "type": "git",
      "url": "https://github.com/Ensighten/grunt-spritesmith.git"
    }
  ],
  "readme": "# grunt-spritesmith\nGrunt task for converting a set of images into a spritesheet and corresponding CSS variables.\n\nA folder of icons processed by `grunt-spritesmith`:\n\n[![Fork icon][fork-icon]][fork-icon] ![+][]\n[![GitHub icon][github-icon]][github-icon] ![+][]\n[![Twitter icon][twitter-icon]][twitter-icon] ![=][]\n\ngenerates a spritesheet:\n\n[![Spritesheet][spritesheet]][spritesheet]\n\nand CSS variables (available in [CSS][], [JSON][], [SASS][], [SCSS][SASS], [LESS][], [Stylus][]):\n\n```stylus\n$fork_offset_x = 0px;\n$fork_offset_y = 0px;\n$fork_width = 32px;\n$fork_height = 32px;\n...\n$github_offset_x = -32px;\n$github_offset_y = 0px;\n$github_width = 32px;\n$github_height = 32px;\n...\n```\n\n[+]: docs/plus.png\n[=]: docs/equals.png\n[fork-icon]: docs/fork.png\n[github-icon]: docs/github.png\n[twitter-icon]: docs/twitter.png\n[spritesheet]: docs/spritesheet.png\n\n[CSS]: https://developer.mozilla.org/en-US/docs/Web/CSS\n[JSON]: http://www.json.org/\n[SASS]: http://sass-lang.com/\n[LESS]: http://lesscss.org/\n[Stylus]: http://learnboost.github.com/stylus/\n\n### Cross-platform support\n\n`grunt-spritesmith` is supported and tested on Windows, Linux, and Mac OSX.\n\n## Getting Started\n`grunt-spritesmith` can be installed via npm: `npm install grunt-spritesmith`\n\n**Before proceeding, verify you have [satisfied your preferred engine's requirements][requirements].**\n\n[requirements]: #requirements\n\nThen, add and configure it to your grunt file (`grunt.js` or `Gruntfile.js` depending on your version):\n\n```javascript\nmodule.exports = function (grunt) {\n  // Configure grunt\n  grunt.initConfig({\n    sprite:{\n      all: {\n        src: 'path/to/your/sprites/*.png',\n        destImg: 'destination/of/spritesheet.png',\n        destCSS: 'destination/of/sprites.css'\n      }\n    }\n  });\n\n  // Load in `grunt-spritesmith`\n  grunt.loadNpmTasks('grunt-spritesmith');\n```\n\nRun the `grunt sprite` task:\n\n```bash\n$ grunt sprite\nRunning \"sprite:all\" (sprite) task\nFiles \"spritesheet.png\", \"sprites.styl\" created.\n\nDone, without errors.\n```\n\nResults are a spritesheet and CSS:\n\n[![Spritesheet][spritesheet]][spritesheet]\n\n```\n.icon-fork {\n  background-image: url(spritesheet.png);\n  background-position: 0px 0px;\n  width: 32px;\n  height: 32px;\n}\n...\n```\n\n## Usage\n`grunt-spritesmith` is a [grunt multitask][multitask]. It is configured on a per-task basis using the following template:\n\n[multitask]: http://gruntjs.com/configuring-tasks\n\n```js\ngrunt.initConfig({\n  'sprite': {\n    'all': {\n      // Sprite files to read in\n      'src': ['public/images/sprites/*.png'],\n\n      // Location to output spritesheet\n      'destImg': 'public/images/sprite.png',\n\n      // Stylus with variables under sprite names\n      'destCSS': 'public/css/sprite_positions.styl',\n\n      // OPTIONAL: Manual override for imgPath specified in CSS\n      'imgPath': '../sprite.png',\n\n      // OPTIONAL: Specify algorithm (top-down, left-right, diagonal [\\ format],\n          // alt-diagonal [/ format], binary-tree [best packing])\n      // Visual representations can be found below\n      'algorithm': 'alt-diagonal',\n\n      // OPTIONAL: Specify padding between images\n      'padding': 2,\n\n      // OPTIONAL: Specify engine (auto, phantomjs, canvas, gm)\n      'engine': 'canvas',\n\n      // OPTIONAL: Specify CSS format (inferred from destCSS' extension by default)\n          // (stylus, scss, sass, less, json, css)\n      'cssFormat': 'json',\n\n      // OPTIONAL: Specify settings for engine\n      'engineOpts': {\n        'imagemagick': true\n      },\n\n      // OPTIONAL: Specify img options\n      'imgOpts': {\n         // Format of the image (inferred from destImg' extension by default) (jpg, png)\n         'format': 'png',\n\n         // Quality of image (gm only)\n         'quality': 90\n      },\n\n      // OPTIONAL: Specify css options\n      'cssOpts': {\n        // Some templates allow for skipping of function declarations\n        'functions': false\n      }\n    }\n  }\n});\n```\n\n### Algorithms\n|     top-down (default)    |           left-right          |          diagonal         |            alt-diagonal           |           binary-tree           |\n| ------------------------- | ----------------------------- | ------------------------- | --------------------------------- | ------------------------------- |\n| [![top-down][]][top-down] | [![left-right][]][left-right] | [![diagonal][]][diagonal] | [![alt-diagonal][]][alt-diagonal] | [![binary-tree][]][binary-tree] |\n\nFor best packing, use `binary-tree` which uses a solution to the [rectangle packing problem][packing-problem].\n\n[packing-problem]: http://en.wikipedia.org/wiki/Packing_problem\n\nIf you are worried about sprites being visible within other sprites, use `alt-diagonal`.\n\nIf you are using a repeating background, `top-down` or `left-right` depending on your occasion.\n\nThe `diagonal` algorithm exists for you if you need it.\n\n[top-down]: docs/top-down.png\n[left-right]: docs/left-right.png\n[diagonal]: docs/diagonal.png\n[alt-diagonal]: docs/alt-diagonal.png\n[binary-tree]: docs/binary-tree.png\n\n## Donating\nSupport this project and [others by twolfson][gittip] via [gittip][].\n\n[![Support via Gittip][gittip-badge]][gittip]\n\n[gittip-badge]: https://rawgithub.com/twolfson/gittip-badge/master/dist/gittip.png\n[gittip]: https://www.gittip.com/twolfson/\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint via [grunt](https://github.com/gruntjs/grunt/) and test via `npm test`.\n\n### Algorithms\nAlgorithms are maintained via [twolfson/layout](https://github.com/twolfson/layout). If you would like to add one, please submit it via a pull request.\n\n### Engines and image options\nEngines and image options are maintained via [Ensighten/spritesmith](https://github.com/Ensighten/spritesmith). If you would like to add one, please submit it via a pull request.\n\n### CSS formats\nCSS formats are maintained via [twolfson/json2css](https://github.com/twolfson/json2css). If you would like to add one, please submit it via a pull request.\n\n## Requirements\nFor cross-platform accessibility, [spritesmith][spritesmith] has and supports multiple sprite engines. However, each of these current engines has a different set of external dependencies.\n\n[spritesmith]: https://github.com/Ensighten/spritesmith\n\n### phantomjs\nThe `phantomjs` engine relies on having [phantomjs][] installed on your machine. Visit [the phantomjs website][phantomjs] for installation instructions.\n\n[spritesmith][] has been tested against `phantomjs@1.9.0`.\n\n[phantomjs]: http://phantomjs.org/\n\n### canvas\nThe `canvas` engine uses [node-canvas][] which has a dependency on [Cairo][cairo].\n\nInstructions on how to install [Cairo][cairo] are provided in the [node-canvas wiki][node-canvas-wiki].\n\nAdditionally, you will need to install [node-gyp][] for the C++ bindings.\n```shell\nsudo npm install -g node-gyp\n```\n\n[node-canvas]: https://github.com/learnboost/node-canvas\n[cairo]: http://cairographics.org/\n[node-canvas-wiki]: (https://github.com/LearnBoost/node-canvas/wiki/_pages\n[node-gyp]: https://github.com/TooTallNate/node-gyp/\n\n### gm (Graphics Magick / Image Magick)\nThe `gm` engine depends on [Graphics Magick][graphics-magick] or [Image Magick][image-magick].\n\n[graphics-magick]: http://www.graphicsmagick.org/\n[image-magick]: http://imagemagick.org/\n\nFor the best results, install from the site rather than through a package manager (e.g. `apt-get`). This avoids potential transparency issues which have been reported.\n\n[spritesmith][] has been developed and tested against `1.3.17`.\n\nIf you are using [Image Magick][image-magick], you must specify it in `engineOpts`\n\n```js\n{\n  'engineOpts': {\n    'imagemagick': true\n  }\n}\n```\n\n## Attribution\n[GitHub][github-icon] and [Twitter][twitter-icon] icons were taken from [Alex Peattie's JustVector Social Icons][justvector].\n\n[Fork][noun-fork-icon] designed by [P.J. Onori][onori] from The Noun Project\n\n[Plus][+] and [Equals][=] icons were built using the [Ubuntu Light typeface][ubuntu-light].\n\n[justvector]: http://alexpeattie.com/projects/justvector_icons/\n[noun-fork-icon]: http://thenounproject.com/noun/fork/#icon-No2813\n[onori]: http://thenounproject.com/somerandomdude\n[ubuntu-light]: http://font.ubuntu.com/\n\n## License\nCopyright (c) 2012-2013 Ensighten\n\nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "grunt-spritesmith@1.7.0",
  "_from": "grunt-spritesmith@"
}
